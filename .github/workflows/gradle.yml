name: CI/CD for Spring Boot

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          gradle-${{ runner.os }}-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build --no-daemon --warning-mode all

    - name: Run tests
      run: ./gradlew test --no-daemon --warning-mode all

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build --no-daemon --warning-mode all

    - name: Copy files via SCP
      env:
        AWS_EC2_USER: ${{ secrets.CICD_ACCESS_KEY }}
        AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
        AWS_EC2_KEY: ${{ secrets.CICD_SECRET_KEY }}
      run: |
        echo "${{ secrets.CICD_SECRET_KEY }}" > ec2_key.pem
        chmod 600 ec2_key.pem
        scp -i ec2_key.pem -o StrictHostKeyChecking=no build/libs/*.jar $AWS_EC2_USER@$AWS_EC2_HOST:~/app/

    - name: SSH and Deploy
      env:
        AWS_EC2_USER: ${{ secrets.CICD_ACCESS_KEY }}
        AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
        AWS_EC2_KEY: ${{ secrets.CICD_SECRET_KEY }}
      run: |
        ssh -i ec2_key.pem -o StrictHostKeyChecking=no $AWS_EC2_USER@$AWS_EC2_HOST << 'EOF'
          pgrep java | xargs kill -9 || true
          nohup java -jar ~/app/*.jar > log.txt 2>&1 &
        EOF
