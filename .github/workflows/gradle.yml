name: CI/CD for Spring Boot

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-home-v1-${{ runner.os }}-build-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-home-v1-${{ runner.os }}-build-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon --warning-mode all -x test  # build 사용

      - name: List build directory contents
        run: ls -al build

      - name: List root directory contents
        run: ls -al

      - name: List all directories and files recursively
        run: find . -type f -print

      - name: Save build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/libs

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Decode and save SSH key
        run: echo "${{ secrets.CICD_SECRET_KEY }}" | base64 --decode > ec2_key.pem
        shell: bash

      - name: Set permission for SSH key
        run: chmod 600 ec2_key.pem

      - name: Decode and save keystore file
        run: echo "${{ secrets.KEYSTORE_FILE_BASE64 }}" | base64 --decode > keystore.p12
        shell: bash

      - name: Create target directory on EC2
        env:
          AWS_EC2_USER: ${{ secrets.CICD_ACCESS_USER }}
          AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $AWS_EC2_USER@$AWS_EC2_HOST 'mkdir -p ~/app/'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/libs

      - name: Verify file existence before SCP
        run: |
          echo "Verifying build/libs directory"
          ls -al build
          ls -al build/libs
          ls build/libs/rocket-back-0.0.1-SNAPSHOT.jar

      - name: Copy files via SCP
        env:
          AWS_EC2_USER: ${{ secrets.CICD_ACCESS_USER }}
          AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
        run: |
          echo "Copying files to EC2"
          scp -i ec2_key.pem -o StrictHostKeyChecking=no build/libs/rocket-back-0.0.1-SNAPSHOT.jar $AWS_EC2_USER@$AWS_EC2_HOST:~/app/
          scp -i ec2_key.pem -o StrictHostKeyChecking=no keystore.p12 $AWS_EC2_USER@$AWS_EC2_HOST:~/app/
          scp -i ec2_key.pem -o StrictHostKeyChecking=no build/libs/application-ec2-template.yaml $AWS_EC2_USER@$AWS_EC2_HOST:~/app/application-ec2.yaml

      - name: Create application-ec2.yaml on EC2
        env:
          AWS_EC2_USER: ${{ secrets.CICD_ACCESS_USER }}
          AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $AWS_EC2_USER@$AWS_EC2_HOST << 'EOF'
            cp /home/ubuntu/app/application-ec2-template.yaml /home/ubuntu/app/application-ec2.yaml
            sed -i "s/\${DB_HOST}/$DB_HOST/g" /home/ubuntu/app/application-ec2.yaml
            sed -i "s/\${DB_NAME}/$DB_NAME/g" /home/ubuntu/app/application-ec2.yaml
            sed -i "s/\${DB_USERNAME}/$DB_USERNAME/g" /home/ubuntu/app/application-ec2.yaml
            sed -i "s/\${DB_PASSWORD}/$DB_PASSWORD/g" /home/ubuntu/app/application-ec2.yaml
            sed -i "s/\${KEYSTORE_PASSWORD}/$KEYSTORE_PASSWORD/g" /home/ubuntu/app/application-ec2.yaml
          EOF

      - name: SSH and Deploy
        env:
          AWS_EC2_USER: ${{ secrets.CICD_ACCESS_USER }}
          AWS_EC2_HOST: ${{ secrets.CICD_ACCESS_HOST }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $AWS_EC2_USER@$AWS_EC2_HOST << 'EOF'
            pgrep java | xargs kill -9 || true
            nohup java -jar ~/app/rocket-back-0.0.1-SNAPSHOT.jar --spring.config.location=file:/home/ubuntu/app/application-ec2.yaml > log.txt 2>&1 &
          EOF
